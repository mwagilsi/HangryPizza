// <auto-generated />
using System;
using HungryPizza.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HungryPizza.Infrastructure.ContextContext.Migrations
{
    [DbContext(typeof(HungryPizzaContext))]
    [Migration("20200814181226_Insert")]
    partial class Insert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HungryPizza.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "Rua Massaharo Kanesaki",
                            Address2 = "Apto 23 Bloco 2",
                            City = "Indaiatuba",
                            Country = "Brasil",
                            District = "Jardim Sevilha",
                            FirstName = "João",
                            LastName = "Silva",
                            Number = "260",
                            Password = "123",
                            State = "São Paulo",
                            UserName = "joao",
                            ZipCode = "13339-575"
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "Rua João Batista Ferrari",
                            City = "Indaiatuba",
                            Country = "Brasil",
                            District = "Jardim Bom Princípio",
                            FirstName = "José",
                            LastName = "Oliveira",
                            Number = "122",
                            Password = "321",
                            State = "São Paulo",
                            UserName = "jose",
                            ZipCode = "13345-686"
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2020, 8, 13, 2, 59, 6, 772, DateTimeKind.Local).AddTicks(9595),
                            Total = 50.0
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Date = new DateTime(2020, 8, 14, 2, 59, 6, 774, DateTimeKind.Local).AddTicks(7060),
                            Total = 55.0
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderDeliveries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address1 = "Rua Massaharo Kanesaki",
                            Address2 = "Apartamento 23 Bloco 2",
                            City = "Indaiatuba",
                            Country = "Brasil",
                            District = "Jardim Sevilha",
                            Number = "260",
                            OrderId = 1,
                            State = "São Paulo",
                            ZipCode = "13339-575"
                        },
                        new
                        {
                            Id = 2,
                            Address1 = "Mário de Almeida",
                            City = "Indaiatuba",
                            Country = "Brasil",
                            District = "Vila Brizolla",
                            Number = "295",
                            OrderId = 2,
                            State = "São Paulo",
                            ZipCode = "13343-510"
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("SplitPie")
                        .HasColumnType("bit");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Quantity = 1,
                            SplitPie = true,
                            Total = 50.0
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            Quantity = 1,
                            SplitPie = false,
                            Total = 55.0
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderItemSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("PizzaId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderItemSplits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderItemId = 1,
                            PizzaId = 5,
                            Price = 27.5
                        },
                        new
                        {
                            Id = 2,
                            OrderItemId = 1,
                            PizzaId = 6,
                            Price = 22.5
                        },
                        new
                        {
                            Id = 3,
                            OrderItemId = 2,
                            PizzaId = 5,
                            Price = 55.0
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Flavor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Flavor = "3 Queijos",
                            Price = 50.0
                        },
                        new
                        {
                            Id = 2,
                            Flavor = "Frango com requeijão",
                            Price = 59.990000000000002
                        },
                        new
                        {
                            Id = 3,
                            Flavor = "Mussarela",
                            Price = 42.5
                        },
                        new
                        {
                            Id = 4,
                            Flavor = "Calabresa",
                            Price = 42.5
                        },
                        new
                        {
                            Id = 5,
                            Flavor = "Pepperoni",
                            Price = 55.0
                        },
                        new
                        {
                            Id = 6,
                            Flavor = "Portuguesa",
                            Price = 45.0
                        },
                        new
                        {
                            Id = 7,
                            Flavor = "Veggie",
                            Price = 59.990000000000002
                        });
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.Order", b =>
                {
                    b.HasOne("HungryPizza.Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderDelivery", b =>
                {
                    b.HasOne("HungryPizza.Domain.Models.Order", "Order")
                        .WithOne("OrderDelivery")
                        .HasForeignKey("HungryPizza.Domain.Models.OrderDelivery", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("HungryPizza.Domain.Models.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HungryPizza.Domain.Models.Pizza", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("HungryPizza.Domain.Models.OrderItemSplit", b =>
                {
                    b.HasOne("HungryPizza.Domain.Models.OrderItem", null)
                        .WithMany("OrderItemSplits")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HungryPizza.Domain.Models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
